package tds1.encryptor;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.examples.terasort.TeraInputFormat;
import org.apache.hadoop.examples.terasort.TeraOutputFormat;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import tds1.io.TeraEncryptedInputFormat;

import crypto.Ope;
import crypto.Rand;

/**
 * Encrypting data generated by TeraGen (TeraInputFormat), output is TeratOutputFormat:
 * + 20 bytes key
 * + 112 bytes value
 * 
 */
public class OpeEncryptor extends Configured implements Tool{

	static final String P_LEN = "ope.plaintext.length";
	static final String CT_LEN = "ope.ciphertext.length";
	static final int TERA_KEY_LEN = 10; 
	@Override
	public int run(String[] args) throws Exception {
		Configuration conf = this.getConf(); 
		Job job = new Job(conf); 
		
		job.setJarByClass(OpeEncryptor.class);
		job.setJobName("OPE encryptor"); 
		job.setMapperClass(OpeMapper.class); 
		job.setNumReduceTasks(0); 
		
		job.setInputFormatClass(TeraInputFormat.class); 
		job.setOutputFormatClass(TeraOutputFormat.class); 
		job.setOutputKeyClass(Text.class); 
		job.setOutputValueClass(Text.class); 
		
		FileInputFormat.addInputPath(job, new Path(args[0])); 
		FileOutputFormat.setOutputPath(job, new Path(args[1])); 
				
		return job.waitForCompletion(true)?0: 1;
	}

	static class OpeMapper extends Mapper<Text,Text,Text,Text>{
		Ope ope; 
		Rand rand; 
		int counter = 0; 
		
		@Override
		public void setup(Context context){
			Configuration conf = context.getConfiguration();
			ope = new Ope(); 
			ope.init(conf.get("key"), TERA_KEY_LEN, conf.getInt(CT_LEN, 20));
			
			rand = new Rand(); 
			rand.init(conf.get("key")); 		
		}
		
		/* input is: 10 bytes key - 90 bytes values
		 */
		@Override
		public void map(Text key, Text val, Context context) throws IOException, InterruptedException{			
			Text newKey = new Text(ope.encrypt(key.copyBytes()));			 
			byte[] valBytes = new byte[TeraEncryptedInputFormat.VALUE_LENGTH]; 
			byte[] randIv = rand.randomBytes(16); 			
			System.arraycopy(randIv, 0, valBytes, 0, 16);
 			
			byte[] ctext = rand.encrypt_word_cbc(val.copyBytes(), randIv); 						
			System.arraycopy(ctext, 0, valBytes, 16, TeraEncryptedInputFormat.VALUE_LENGTH-16);
			Text newVal = new Text(valBytes);			
			context.write(newKey, newVal); 			
			
		}
	}
	
	public static void main(String[] args) throws Exception{
		ToolRunner.run(new OpeEncryptor(), args); 
	}
}
