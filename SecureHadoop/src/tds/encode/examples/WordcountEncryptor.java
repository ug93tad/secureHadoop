package tds.encode.examples;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.log4j.Logger;

import tds.ICrypto;
import tds.TdsOptions;
import tds.Utils;
import tds.common.Det;
import tds.common.Rand;
import tds.io.Ciphertext;


/**
 * @author dinhtta
 * 
 * Read the SequenceInputFile<NullWritable, Text> generated by RandomTextWriter, and encrypt the words
 * individually. The output is another SequenceOutputFil<NullWritable, BytesWritable> 
 * 
 * -D encryption_mode=line/word,
 * 
 * FOR THIS IMPLEMENTATION, JUST ENCRYPTING WORD BY WORD. See old implementations (examples) for detail
 *
 */
public class WordcountEncryptor extends Configured implements Tool{	
	
	@Override
	public int run(String[] arg0) throws Exception {
		Configuration conf = this.getConf();  		
		Job job = new Job(conf); 
		
		job.setJobName("wordcount encryptor"); 
		job.setJarByClass(WordcountEncryptor.class); 
		FileInputFormat.addInputPath(job, new Path(arg0[0])); 
		FileOutputFormat.setOutputPath(job, new Path(arg0[1])); 
		
		job.setInputFormatClass(TextInputFormat.class); 
		job.setMapperClass(DetEncryptorMapper.class);
		job.setOutputKeyClass(NullWritable.class); 
		job.setOutputValueClass(Ciphertext.class); 
		
		job.setOutputFormatClass(SequenceFileOutputFormat.class); 
		job.setNumReduceTasks(0); 
		
		return job.waitForCompletion(true)?0:1; 		
	}

	public static void main(String[] args) throws Exception{
		ToolRunner.run(new WordcountEncryptor(), args); 
	}
}

class DetEncryptorMapper extends Mapper<LongWritable, Text, NullWritable, Ciphertext>{
	private ICrypto crypto; 
	private boolean isHOM = false; 
	
	static Logger log = Logger.getLogger(DetEncryptorMapper.class);
	@Override
	public void setup(Context context){		
		Configuration conf = context.getConfiguration();
							 		
		this.isHOM = conf.getBoolean(TdsOptions.HOM_OPTION, false);
		
		if (this.isHOM)
			this.crypto = new Det(); 
		else
			this.crypto = new Rand();
		
		this.crypto.initPrivateParameters(Utils.getSymParams(conf)); 
	}
	
	/* translating one line to multiple <NullWritable, BytesWritable> tuples.
	 * Output file is SequenceOutputFile
	 */
	@Override
	public void map(LongWritable key, Text val, Context context) throws IOException, InterruptedException{		
		String[] ss = val.toString().split("\\s+"); 
		if (this.isHOM)
		for (String s : ss) {			
			context.write(NullWritable.get(), new Ciphertext(crypto.encryptString(s)));
		}				
		else
			context.write(NullWritable.get(), new Ciphertext(crypto.encryptString(val.toString()))); 
	}
}


