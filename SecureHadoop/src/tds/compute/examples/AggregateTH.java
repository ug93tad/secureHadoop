package tds.compute.examples;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Counter;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import tds.ICrypto;
import tds.TdsOptions;
import tds.Utils;
import tds.common.Det;
import tds.common.Rand;
import tds.io.Ciphertext;
import tds.io.EncryptedVector;
import tds.io.EncryptedVectorWritable;


/**
 * Aggregate implementation over baseline encrypted data. 
 * 
 * Input is the sequence file generated by BaslineAggregateEncryptor
 *
 */
public class AggregateTH extends Configured implements Tool{

	@Override
	public int run(String[] args) throws Exception {
		Configuration conf = this.getConf();
		Job job = new Job(conf); 
		job.setJobName("aggregate with TH"); 
		job.setJarByClass(AggregateTH.class);
		job.setMapperClass(AggregateBaselineMapper.class);
		job.setCombinerClass(AggregateBaselineReducer.class);
		job.setReducerClass(AggregateBaselineReducer.class);
		
		job.setInputFormatClass(SequenceFileInputFormat.class);
		job.setOutputFormatClass(SequenceFileOutputFormat.class);
		job.setMapOutputKeyClass(Ciphertext.class);
		job.setMapOutputValueClass(Ciphertext.class);
		job.setOutputKeyClass(Ciphertext.class);
		job.setOutputValueClass(Ciphertext.class); 
		
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1])); 
		
		int result =  job.waitForCompletion(true)? 0: 1;	
		Counter c = job.getCounters().findCounter(TdsOptions.HEEDOOP_COUNTER.RND); 
		System.out.println("Counter "+c.getDisplayName()+" : "+c.getValue());
		return result; 
	}

	//output (<encrypted sourceIP>,<long>)
	static class AggregateBaselineMapper extends Mapper<NullWritable, EncryptedVectorWritable, Ciphertext, Ciphertext>{	
		
		ICrypto crypto, reEncryptor;
		@Override
		public void setup(Context context){
			Configuration conf = context.getConfiguration();
					
			crypto = new Rand();  
			crypto.initPrivateParameters(Utils.getSymParams(conf));
			
			reEncryptor = new Det();
			reEncryptor.initPrivateParameters(Utils.getSymParams(conf)); 
		}
		
		@Override
		public void map(NullWritable key, EncryptedVectorWritable value, Context context)
				throws IOException, InterruptedException {

			
			String pt = crypto.decryptToText(value.get().getQuick(0)); 		
			context.getCounter(TdsOptions.HEEDOOP_COUNTER.RND).increment(1); 
			String[] vals = pt.split(",");			
			
			//convert key to DET and value to RND
			context.write(new Ciphertext(reEncryptor.encryptString(vals[0])),
					new Ciphertext(crypto.encryptString(Long.parseLong(vals[3])+"")));
		}
				
	}
		
	
	static class AggregateBaselineReducer extends Reducer<Ciphertext, Ciphertext, Ciphertext, Ciphertext>{
		ICrypto crypto; 		
		
		@Override
		public void setup(Context context){
			Configuration conf = context.getConfiguration();			
			
			crypto = new Rand();  
			crypto.initPrivateParameters(Utils.getSymParams(conf));					 
		}
		
		@Override
		public void reduce(Ciphertext key, Iterable<Ciphertext> values,
				Context context) throws IOException, InterruptedException {
			
			long sum = 0;
			for (Ciphertext val:values){
				sum+= Long.parseLong(crypto.decryptToText(val.getContent().copyBytes())); 
				context.getCounter(TdsOptions.HEEDOOP_COUNTER.RND).increment(1); 
			}					
			context.write(key, new Ciphertext(crypto.encryptString(sum+"")));
		}
	}
	
	public static void main(String[] args) throws Exception{
		ToolRunner.run(new AggregateTH(), args); 
	}
}
