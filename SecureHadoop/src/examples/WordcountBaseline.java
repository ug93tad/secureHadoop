package examples;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import crypto.Det;
import crypto.Rand;

/**
 * Wordcount implementation on the data generated by BaselineTextEncryptor.
 * 
 * Assumption is that the computation is trustworthy, only when data is persisted to disk is it subject to attacks.
 * 
 * Map: decrypt the ciphertext, using the read IV. Output is <Text, Long>
 * 
 * Reduce: write to SequenceFileOutputFormat<BytesWritable, BytesWritable> with key is the randomIV, and 
 * the value is encryption of the (Text,Long) tuples. This is similar to encryption in BaselineTextEncryptor
 */
public class WordcountBaseline extends Configured implements Tool{

	@Override
	public int run(String[] args) throws Exception {
		Configuration conf = this.getConf(); 
		Job job = new Job(conf); 
		
		job.setJobName("Baseline word count"); 
		job.setJarByClass(WordcountBaseline.class); 
		job.setMapperClass(WCBaselineMapper.class);		
		job.setCombinerClass(WCBaselineCombiner.class); 
		job.setReducerClass(WCBaselineReducer.class); 
		job.setInputFormatClass(SequenceFileInputFormat.class); 
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(LongWritable.class); 
				
		
		job.setOutputKeyClass(BytesWritable.class);
		job.setOutputValueClass(BytesWritable.class); 					
		job.setOutputFormatClass(SequenceFileOutputFormat.class);
		
		FileInputFormat.addInputPath(job, new Path(args[0])); 
		FileOutputFormat.setOutputPath(job, new Path(args[1])); 
				
		
		return job.waitForCompletion(true)?0:1;
	}
	
	public static void main(String[] args) throws Exception{
		ToolRunner.run(new WordcountBaseline(), args);
	}
}

class WCBaselineMapper extends Mapper<BytesWritable, BytesWritable, Text, LongWritable>{
	Rand crypto;
	
	@Override
	public void setup(Context context){
		Configuration conf = context.getConfiguration(); 
		crypto = new Rand(); 			
		crypto.init(conf.get("key")); 
	}
	
	/* decrypt, then compute
	 */
	@Override
	public void map(BytesWritable key, BytesWritable val, Context context) throws IOException, InterruptedException{
		byte[] iv = key.copyBytes(); 
		byte[] ct = val.copyBytes(); 
		String[] ss = new String(crypto.decrypt_word_rnd(ct, iv)).split("\\s+");
		for (String s:ss)
			context.write(new Text(s), new LongWritable(1)); 
	}
}

class WCBaselineCombiner extends Reducer<Text, LongWritable, Text, LongWritable>{
	@Override 
	public void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException{
		long s =0;
		for (LongWritable lw : values)
			s+=lw.get(); 
		context.write(key, new LongWritable(s)); 
	}
}

class WCBaselineReducer extends Reducer<Text, LongWritable, BytesWritable, BytesWritable>{
	static final int AES_BLOCK_SIZE=16; 
	Det crypto;
	
	@Override
	public void setup(Context context){
		Configuration conf = context.getConfiguration(); 
		crypto = new Det(); 			
		crypto.det_init(conf.get("key"), conf.get("iv")); 
	}
	
	@Override
	public void reduce(Text key, Iterable<LongWritable> vals, Context context) throws IOException, InterruptedException{
		int s=0;
		for (LongWritable lw : vals)
			s+=lw.get(); 
		String pt = key.toString()+" "+s; 
		byte[] iv = crypto.randomBytes(AES_BLOCK_SIZE);
		byte[] ct = crypto.encrypt_word_rnd(pt, iv); 
		context.write(new BytesWritable(iv), new BytesWritable(ct)); 			
	}
}
