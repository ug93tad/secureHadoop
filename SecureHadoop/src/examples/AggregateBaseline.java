package examples;

import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import crypto.Paillier;
import crypto.Rand;

/**
 * Aggregate implementation over baseline encrypted data. 
 * 
 * Input is the sequence file generated by BaslineAggregateEncryptor
 *
 */
public class AggregateBaseline extends Configured implements Tool{

	@Override
	public int run(String[] args) throws Exception {
		Configuration conf = this.getConf();
		Job job = new Job(conf); 
		job.setJobName("aggregate baeline"); 
		job.setJarByClass(AggregateBaseline.class);
		job.setMapperClass(AggregateBaselineMapper.class);
		job.setCombinerClass(AggregateBaselineCombiner.class);
		job.setReducerClass(AggregateBaselineReducer.class);
		
		job.setInputFormatClass(SequenceFileInputFormat.class);
		job.setOutputFormatClass(SequenceFileOutputFormat.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(LongWritable.class);
		job.setOutputKeyClass(BytesWritable.class);
		job.setOutputValueClass(BytesWritable.class); 
		
		
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1])); 
		
		return job.waitForCompletion(true) ? 0 : 1;
	}

	//output (<encrypted sourceIP>,<long>)
	static class AggregateBaselineMapper extends Mapper<BytesWritable, BytesWritable, Text, LongWritable>{	
		
		Rand rand;
		@Override
		public void setup(Context context){
			Configuration conf = context.getConfiguration();
			rand = new Rand();
			rand.init(conf.get("key"));			
		}
		
		@Override
		public void map(BytesWritable key, BytesWritable value, Context context)
				throws IOException, InterruptedException {

			String pt = new String(rand.decrypt_word_cbc(value.copyBytes(), key.copyBytes())); 
			String[] vals = pt.split(",");			
			context.write(new Text(vals[0]),
					new LongWritable(new Long(vals[3]).longValue()));
		}
				
	}
	
	static class AggregateBaselineCombiner extends Reducer<Text, LongWritable, Text, LongWritable>{
		@Override
		public void reduce(Text key, Iterable<LongWritable> vals, Context context) throws IOException, InterruptedException{
			long sum = 0;
			for (LongWritable l:vals)
				sum+=l.get();
			context.write(key, new LongWritable(sum)); 
		}		
	}
	
	static class AggregateBaselineReducer extends Reducer<Text, LongWritable, BytesWritable, BytesWritable>{
		Rand rand; 		
		
		@Override
		public void setup(Context context){
			Configuration conf = context.getConfiguration(); 
			rand = new Rand();
			rand.init(conf.get("key")); 						 
		}
		
		@Override
		public void reduce(Text key, Iterable<LongWritable> values,
				Context context) throws IOException, InterruptedException {
			long sum = 0;
			for (LongWritable l:values)
				sum+=l.get();
			String data = key.toString()+"\t"+sum;			
			byte[] iv = rand.randomBytes(16);			
			byte[] ct = rand.encrypt_word_cbc(data, iv);			
			context.write(new BytesWritable(iv), new BytesWritable(ct));
		}
	}
	
	public static void main(String[] args) throws Exception{
		ToolRunner.run(new AggregateBaseline(), args); 
	}
}
